import ffi as c
import cutil (wrap)

if not let $curses = c.dlopen('libncurses.so.5') {
	throw 'Failed to load curses'
}

let KEY_DOWN = 258
let KEY_UP = KEY_DOWN + 1
let KEY_LEFT = KEY_UP + 1
let KEY_RIGHT = KEY_LEFT + 1

let KEY_BACKSPACE = 263

pub initscr = wrap(curses, 'initscr', c.ptr)
pub endwin = wrap(curses, 'endwin', c.int)
pub mvaddnstr = wrap(curses, 'mvaddnstr', c.int, c.int, c.int, c.ptr, c.int)
pub refresh = wrap(curses, 'refresh', c.int)
pub getch = wrap(curses, 'getch', c.int)
pub curs_set = wrap(curses, 'curs_set', c.int, c.int)
pub getmaxx = wrap(curses, 'getmaxx', c.int, c.ptr)
pub getmaxy = wrap(curses, 'getmaxy', c.int, c.ptr)
pub move = wrap(curses, 'move', c.int, c.int, c.int)
pub echo = wrap(curses, 'echo', c.int)
pub noecho = wrap(curses, 'noecho', c.int)
pub cbreak = wrap(curses, 'cbreak', c.int)
pub nocbreak = wrap(curses, 'nocbreak', c.int)
pub raw = wrap(curses, 'raw', c.int)
pub noraw = wrap(curses, 'noraw', c.int)
pub keypad = wrap(curses, 'keypad', c.int, c.ptr, c.u8)
pub clrtoeol = wrap(curses, 'clrtoeol', c.int)

pub stdscr = nil

let s = c.new(c.ptr)
let n = c.new(c.int)

let x = c.new(c.int)
let y = c.new(c.int)

pub initscr = () -> { stdscr = initscr() }

pub function getmaxyx() {
	(getmaxy(stdscr), getmaxx(stdscr))
}

pub function mvaddstr(i, j, msg) {
	mvaddnstr(i, j, msg, msg.size())
}
