tag CancelledError;

class ThreadPool {
  init(n, f, setup) {
    @f = f
    @setup = setup
    @queue = []
    @mtx = Mutex()
    @cv = CondVar()
    @stop = false
    @threads = [Thread(@runThread) for _ in ..n]
  }

  submit(*args, %kwargs) {
    @mtx.lock()

    let future = Future()

    @queue.push((args, kwargs, future))

    @mtx.unlock()
    @cv.signal()

    return future
  }

  runThread() {
    let state = if @setup != nil {
        (@setup)()
    }

    while true {
      @mtx.lock()

      while !@stop && #@queue == 0 {
        @cv.wait(@mtx)
      }

      if @stop && #@queue == 0 {
        @mtx.unlock()
        break
      }

      let (args, kwargs, future) = @queue.pop(0)

      @mtx.unlock()

      future.mtx.lock()

      if future.cancelled {
        future.mtx.unlock()
        continue
      } else {
        future.running = true
        future.mtx.unlock()
      }

      let x = (self.f)(*args, state if state != nil, **kwargs)

      future.mtx.lock()
      future.box.push(x)
      future.mtx.unlock()

      future.cv.signal()
    }
  }

  close() {
    @mtx.lock()
    @stop = true
    @mtx.unlock()
    @cv.broadcast()
    @threads.map(&join)
  }

  __drop__() {
    self.close()
  }
}

class Future {
  init() {
    @cv = CondVar()
    @mtx = Mutex()
    @box = []
    @running = false
    @cancelled = false
  }

  wait() {
    @mtx.lock()

    if @cancelled {
      throw CancelledError
    }

    while #@box == 0 {
      @cv.wait(@mtx)
    }

    let [x] = @box

    @mtx.unlock()

    return x
  }

  cancel() {
    with _ = @mtx.lock() {
      if @running {
        return false
      } else {
        @cancelled = true
        return true
      }
    }
  }

  running?() {
    with _ = @mtx.lock() {
      @running
    }
  }

  ready?() {
    with _ = @mtx.lock() {
      #@box == 1
    }
  }
}
