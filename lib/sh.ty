import os
import time (utime)
import errno (ETIMEDOUT)

export ls, sh, expand

function sh(c, input, timeoutMs, signal=os.SIGKILL, combineOutput=false) {
    if not let $p = os.spawn(
		['bash', '-c', c],
		detached: timeoutMs != nil,
		combineOutput: combineOutput
	) {
	      return nil
    }

    let out = blob()
	let err = blob()

    if input != nil {
        os.write(p.stdin, input)
    }

    os.close(p.stdin)

    let start = utime()

    while timeoutMs == nil || timeoutMs > 0 {
        let pfds = [
			(fd: p.stdout, events: os.POLLIN),
			(fd: p.stderr, events: os.POLLIN)
		]

        if os.poll(pfds, timeoutMs ?? -1) < 1 {
            os.kill(-p.pid, signal)
            return nil
        }

        if timeoutMs != nil {
            let now = utime()
            timeoutMs -= (now - start) / 1000
            start = now
        }

		if pfds.len() > 1 && pfds[1].revents .&. os.POLLIN {
			os.read(p.stderr, err, 4096)
		}

        if pfds[0].revents .&. os.POLLIN {
            os.read(p.stdout, out, 4096)
        } else if pfds[0].revents .&. (os.POLLERR .|. os.POLLHUP) {
            break
        }
    }

    os.close(p.stdout)
    if p.stderr != nil { os.close(p.stderr) }

    let (_, s) = os.waitpid(p.pid)

    return out.str(), os.WEXITSTATUS(s), out
}

function ls(d, flags) {
    return sh("ls '{d}' {flags || ''}").split("\n")
}

function expand(s) {
    return sh("echo -n {s}")
}
