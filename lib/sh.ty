import os
import time (utime)
import errno (ETIMEDOUT)

export ls, sh, expand

function sh(c, input, timeoutMs, signal = os.SIGKILL) {
    if not let $p = os::spawn(['bash', '-c', c], {detached: timeoutMs != nil}) {
	      return nil;
    }

    let out = blob();

    if input != nil {
        os::write(p.stdin, input);
    }

    os::close(p.stdin);

    let start = utime()

    while timeoutMs == nil || timeoutMs > 0 {
        let pfds = [(fd: p.stdout, events: os.POLLIN)]

        if os.poll(pfds, timeoutMs ?? -1) != 1 {
            os.kill(-p.pid, signal)
            return nil
        }

        if timeoutMs != nil {
            let now = utime()
            timeoutMs -= (now - start)
            start = now
        }

        if pfds[0].revents .&. os.POLLIN {
            os.read(p.stdout, out, 4096)
        } else {
            break
        }
    }

    os::close(p.stdout);
    os::close(p.stderr);

    let (_, s) = os::waitpid(p.pid);

    return out.str(), os::WEXITSTATUS(s), out;
}

function ls(d, flags) {
    return sh("ls '{d}' {flags || ''}").split("\n");
}

function expand(s) {
    return sh("echo -n {s}");
}
