import bit
import math

export Some, None, Ok, Err, MatchError

tag MatchError;

tag None {
     map()     { return None; }
     flatMap() { return None; }
}

tag Some {
     map(f) {
          return Some(f(self));
     }

     flatMap(f) {
          return f(self);
     }

    from(x) {
        return match x {
            nil => None,
            _   => Some(x)
        };
    }
}

tag Ok {
     map(f) {
          return Ok(f(self));
     }

     flatMap(f) {
          return f(self);
     }
}

tag Err {
     map()     { return self; }
     flatMap() { return self; }
}

class Object {
    init() {
        return object(Object);
    }

    is?(c) {
        return subclass?(type(self), c);
    }

    members() {
        return members(self);
    }

    |(other) {
        return c -> (c :: self) || (c :: other);
    }

    &(other) {
        return c -> (c :: self) && (c :: other);
    }

    :>(other) {
        return x -> (self(x) :: other);
    }

    __match__(other) {
        return self == other;
    }

    __question__() {
        return \$ == nil\ | self;
    }
}

class Class {
    |(other) {
        return c -> (c :: self) || (c :: other);
    }

    &(other) {
        return c -> (c :: self) && (c :: other);
    }

    __match__(other) {
        return type(other) != Class && other.is?(self);
    }
}

class Function {
    init() {
        return id;
    }

    flip() {
        return (a, b) -> self(b, a);
    }

    bind(x) {
        return bindMethod(self, x);
    }

    apply(x, *ys) {
        return apply(self, x, *ys);
    }

    __match__(x) {
        return self(x);
    }
}

class Array : Iterable {
    init(*xs) {
        return xs;
    }

    sorted?() {
        for i in 1..#self {
            if self[i - 1] > self[i] {
                return false;
            }
        }

        return true;
    }

    cycle() {
        let i = 0;
        return Generator(function () {
            return self[i++ % self.len()];
        });
    }

    str() {
        return self.map(str).sum();
    }

    list() {
        return self;
    }

    mean() {
        return match self {
            [] => nil,
            _  => self.map(float).sum() / self.len()
        };
    }

    coalesce() {
        for x in self if x != nil {
            return x;
        }
    }

    __iter__() {
        let i = 0;
        return Generator(function () {
            if (i < self.len()) return self[i++];
        });
    }

    __subscript__(T) {
        return xs -> xs.all?(x -> x :: T);
    }
}

class Dict : Iterable {
    init(ks, vs) {
        if ks && vs {
            return { k: v for [k, v] in ks.zip(vs) };
        } else {
            return {};
        }
    }

    map(f) {
        return { k: f(v) for k, v in self };
    }

    kmap(f) {
        return { f(k): v for k, v in self };
    }

    __iter__() {
        return self.keys().zip(self.values()).__iter__();
    }
}

class String : Iterable {
    init(x) {
        return str(x);
    }

    repeat(n) {
        return if n != nil {
            let b = blob();
            for _ in ..n { b.push(self); }
            b.str()
        } else {
            Generator(-> self);
        };
    }

    reverse() {
        return self.chars().reverse!().sum() ?? '';
    }

    num?() {
        return self.match?(/^\d+(?:\.\d+)?$/);
    }

    searchr(pattern) {
        for (let off = self.len() - 1; off >= 0; --off) {
            if let $i = self.search(pattern, off) {
                return i;
            }
        }
    }

    __iter__() {
        let cs = self.chars();
        let i = 0;
        return Generator(function StringGen() {
            if (i < cs.len()) return cs[i++];
        });
    }
}

class Int {
    init(x)  { return int(x ?? 0);           }

    ^(b)    { return bit::XOR(self, b);        }
    .&.(b)  { return bit::AND(self, b);        }
    .|.(b)  { return bit::OR(self, b);         }
    <<(b)   { return bit::shiftLeft(self, b);  }
    >>(b)   { return bit::shiftRight(self, b); }
    **(b)   { return math::pow(self, b);       }

    upto(b: Int) {
        return Generator(function UpToFunc() {
            if (self <= b) return self++;
        });
    }

    downto(b: Int) {
        return Generator(function () {
            if (self >= b) return self--;
        });
    }

    count(k: Int = 1) {
        return Generator(function () {
            return (self += k) - k;
        });
    }

    in?(r: Range) {
        return r ? self;
    }
}

class Float {
    init(x) {
        return float(x);
    }

    **(b: Int | Float) {
        return math::pow(self, b);
    }
}

class Blob : Iterable {
    init(*args) {
        let b = blob();
        for arg in args { b.push(arg); }
        return b;
    }

    searchr(s) {
        for (let off = self.size() - 1; off >= 0; --off) {
            if let $i = self.search(off, s) {
                return i;
            }
        }
    }

    __iter__() {
        let i = 0;
        return Generator(function () {
            if (i < self.size())
                return self[i++];
        });
    }
}

class Bool {
    init(x) {
        return bool(x);
    }
}

class Regex {
    init(x)  { return regex(x);    }

    ~=(s) { return s.match!(self); }

    ?(s)  { return s.match?(self); }

    __match__(s) {
        return (s :: String) && s.match?(self);
    }
}

class Generator : Iter {
    init(f) {
        self.f = f;
    }

    __next__() {
        return (self.f)();
    }
}

class Iterable {
    map(f) {
        return self.__iter__().map(f);
    }

    filter(f) {
        return self.__iter__().filter(f);
    }

    reverse() {
        return self.__iter__().reverse();
    }

    list() {
        return self.__iter__().list();
    }

    uniq(f) {
        return self.__iter__().uniq(f);
    }

    take(n) {
        return self.__iter__().take(n);
    }

    drop(n) {
        return self.__iter__().drop(n);
    }

    set() {
        return self.__iter__().set();
    }

    str() {
        return self.__iter__().str();
    }

    join(s) {
        return self.__iter__().join(s);
    }

    tally(f) {
        return self.__iter__().tally(f);
    }

    min(k) {
        return self.__iter__().min(k);
    }

    max(k) {
        return self.__iter__().max(k);
    }

    count(x) {
        return self.__iter__().count(x);
    }

    intersperse(x) {
        return self.__iter__().intersperse(x);
    }

    groupsOf(n, keepShort) {
        return self.__iter__().groupsOf(n, keepShort);
    }

    mean() {
        return self.__iter__().mean();
    }

    sum() {
        return self.__iter__().sum();
    }

    fold(a, b) {
        return self.__iter__().fold(a, b);
    }

    group(f) {
        return self.__iter__().group(f);
    }

    chain(A, B) {
        return A.__iter__().chain(B);
    }

    cycle() {
        return self.list().cycle();
    }

    repeat(n) {
        return self.__iter__().repeat(n);
    }

    __len__() {
        return self.__iter__().__len__();
    }

    __subscript__(i) {
        return self.__iter__().__subscript__(i);
    }
}

class Iter : Iterable {
    map(f) {
        return MapIter(self, f);
    }

    filter(f) {
        return FilterIter(self, f);
    }

    fold(x, f) {
        if f == nil {
            f = x;
            if true && (x = self.__next__()) == nil {
                return nil;
            }
        }

        while let $y = self.__next__() {
            x = f(x, y);
        }

        return x;
    }

    __len__() {
        let n = 0;
        while let $_ = self.__next__() { n += 1; }
        return n;
    }

    uniq(f: Function = id) {
        let seen = {};
        return Generator(function () {
            while let $x = self.__next__() {
                let y = f(x);
                if !(seen ? y) {
                    seen.put(y);
                    return x;
                }
            }
        });
    }

    group(f = id) {
        if !let $x = self.__next__() {
            return Generator(-> nil);
        }

        let g = [x];

        return Generator(function () {
            while let $x = self.__next__() {
                if f(x) == f(g[-1]) {
                    g.push(x);
                } else {
                    let group = g;
                    g = [x];
                    return group;
                }
            }

            if g {
                let group = g;
                g = nil;
                return group;
            }
        });
    }

    groupsOf(n: Int & n >= 0, keepShort: Bool = true) {
        return Generator(function () {
            return match self.take(n).list() {
                xs: #xs == n             => xs,
                xs: #xs > 0 && keepShort => xs,
                _ => nil
            };
        });
    }

    join(sep: String) {
        if !let (str ~> $s) = self.__next__() {
            return '';
        }

        let b = blob();
        b.push(s);

        while let $s = self.__next__() {
            b.push(sep);
            b.push(str(s));
        }

        return b.str();
    }

    count(x) {
        let n = 0;

        if type(x) == Function || type(x) == Regex {
            while let $y = self.__next__() {
                if (x(y)) n += 1;
            }
        } else {
            while let $y = self.__next__() {
                if (x == y) n += 1;
            }
        }

        return n;
    }

    list() {
        let xs = [];
        while let $x = self.__next__() {
            xs.push(x);
        }
        return xs;
    }

    reverse() {
        return ReverseIter(self);
    }

    take(n) {
        let i = 0;
        return Generator(function () {
            if i++ < n {
                return self.__next__();
            }
        });
    }

    drop(n) {
        for _ in ..n { self.__next__(); }
        return self;
    }

    set() {
        return { x for x in self };
    }

    str() {
        let b = blob();
        for s in self {
            b.push(str(s));
        }
        return b.str();
    }

    tally(f = id) {
        let d = {*:0};
        for x in self { d[f(x)] += 1; }
        return d;
    }

    max(k = id) {
        if !let $x = self.__next__() {
            return nil;
        }

        let m = x;
        let mKey = k(m);

        while let $x = self.__next__() {
            let key = k(x);
            if key > mKey {
                m, mKey = x, key;
            }
        }

        return m;
    }

    min(k = id) {
        if !let $x = self.__next__() {
            return nil;
        }

        let m = x;
        let mKey = k(m);

        while let $x = self.__next__() {
            let key = k(x);
            if key < mKey {
                m, mKey = x, key;
            }
        }

        return m;
    }

    intersperse(x) {
        let i = 0;
        let next = self.__next__();
        return Generator(function () {
            if (next != nil) match i++ % 2 {
                0 => {
                    let r = next;
                    next = self.__next__();
                    return r;
                },
                1 => {
                    return x;
                }
            }
        });
    }

    chainAll() {
        if !let $it = self.__next__() {
            return nil;
        }
        if !it.is?(Iter) {
            it = it.__iter__();
        }
        return Generator(function () {
            if let $x = it.__next__() {
                return x;
            } else if ((it = self.__next__()) == nil) {
                return nil;
            } else if !it.is?(Iter) {
                it = it.__iter__();
            }
            return it.__next__();
        });
    }

    chain(*its) {
        let i = 0;

        for i in ..#its if !its[i].is?(Iter) {
            its[i] = its[i].__iter__();
        }

        return Generator(function () {
            if let $x = its[i].__next__() {
                return x;
            } else if (++i >= #its) {
                return nil;
            } else {
                return its[i].__next__();
            }
        });
    }

    cycle() {
        return self.list().cycle();
    }

    repeat(n) {
        let xs = self.list();
        let i = 0;
        let j = 0;
        return Generator(function () {
            if j == #xs {
                j = 0;
                i += 1;
            }
            if i != n {
                return xs[j++];
            }
        });
    }

    replicate(x, n) {
        let i = 0;
        return Generator(function () {
            if n == nil || i++ < n { return x; }
        });
    }

    sum() {
        return self.list().sum();
    }

    mean() {
        return self.list().mean();
    }

    __subscript__(i) {
        for _ in ..(i - 1) {
            if self.__next__() == nil { return nil; }
        }
        return self.__next__();
    }

    __iter__() { return self.__iter__(); }
}

class ReverseIter : Iter {
    init(I) {
        self.xs = [];
        while let $x = I.__next__() {
            self.xs.push(x);
        }
    }

    __next__() {
        if (self.xs) return self.xs.pop();
    }
}

class MapIter : Iter {
    init(I, f) {
        self.I = I;
        self.f = f;
    }

    __next__() {
        if let $n = self.I.__next__() {
            return (self.f)(n);
        }
    }
}

class FilterIter : Iter {
    init(I, p) {
        self.I = I;
        self.p = p;
    }

    __next__() {
        while let $n = self.I.__next__() {
            if self.p(n) { return n; }
        }
    }
}

class RangeIter : Iter {
    init(a, b) {
        self.a = a;
        self.b = b;
    }

    __next__() {
        if (self.a < self.b) return self.a++;
    }
}

class Range : Iterable {
    init(a, b) {
        self.a = a;
        self.b = b;
    }

    low() {
        return min(self.a, self.b);
    }

    high() {
        return max(self.a, self.b) - 1;
    }

    __len__() {
        return self.high() - self.low() + 1;
    }

    __str__() {
	return "({self.a} .. {self.b})";
    }

    contains?(k) {
	return self ? k;
    }

    __match__(x) {
        return x :: (Int | Float) & (self ? x);
    }

    has?(k) {
        return self ? k;
    }

    ?(k) {
	return k >= self.low() && k <= self.high();
    }

    __iter__() {
        let a, b = self.a, self.b;
        return (
            if a < b {
                a.upto(b - 1)
            } else {
                (a - 1).downto(b)
            }
        );
    }
}

class InclusiveRange : Range {
    __str__() {
        return "({self.a} ... {self.b})";
    }

    __iter__() {
        let a, b = self.a, self.b;
        return if a < b {
            a.upto(b)
        } else {
            a.downto(b);
        };
    }

    high() {
        return max(self.a, self.b);
    }
}

function id(x) { return x; }

operator ?    5  left
operator **   10 right
operator <<   7  left
operator >>   7  left
operator ^    5  left
operator :>   5  left
