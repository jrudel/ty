export Some, None, Ok, Err

tag Some {
     map(self, f) {
          return Some(f(self));
     }

     flatMap(self, f) {
          return f(self);
     }
}

tag None {
     map()     { return None; }
     flatMap() { return None; }
}

tag Ok {
     map(self, f) {
          return Ok(f(self));
     }

     flatMap(self, f) {
          return f(self);
     }
}

tag Err {
     map(self)     { return self; }
     flatMap(self) { return self; }
}

class RangeIter {
    init(self, a, b) {
	self.a = a;
	self.b = b;
    }

    __next__(self) {
	if (self.a < self.b) {
	    return self.a++;
	}
    }
}

class Range {
    init(self, a, b) {
	self.a = a;
	self.b = b;
    }

    low(self) {
	return self.a;
    }

    high(self) {
	return self.b;
    }

    __iter__(self) {
	return RangeIter(self.a, self.b);
    }

    list(self) {
	let xs = [];
	for x in self { xs.push(x); }
	return xs;
    }

    __str__(self) {
	return "({self.low()}..{self.high()})";
    }

    contains?(self, k) {
	return k >= self.low() && k < self.high();
    }
}

class InclusiveRange : Range {
    high(self) {
	return self.b + 1;
    }
}
