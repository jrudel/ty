import bit
import math

export Some, None, Ok, Err, MatchError

tag MatchError;

tag None {
     map()     { return None; }
     flatMap() { return None; }
}

tag Some {
     map(self, f) {
          return Some(f(self));
     }

     flatMap(self, f) {
          return f(self);
     }

    from(x) {
        return match x {
            nil => None,
            _   => Some(x)
        };
    }
}

tag Ok {
     map(self, f) {
          return Ok(f(self));
     }

     flatMap(self, f) {
          return f(self);
     }
}

tag Err {
     map(self)     { return self; }
     flatMap(self) { return self; }
}

class Object {
    init() {
        return object(Object);
    }

    is?(self, c) {
        return subclass?(type(self), c);
    }

    members(self) {
        return members(self);
    }
}

class Function {
    init() {
        return |$|;
    }

    flip(f) {
        return (a, b) -> f(b, a);
    }
}

class Array : Iterable {
    init(*xs) {
        return xs;
    }

    sorted?(xs) {
        if (!xs) return true;

        let y = xs[0];
        for x in xs {
            if (x < y) return false;
            y = x;
        }

        return true;
    }

    cycle(xs) {
        let i = 0;
        return Generator(function () {
            return xs[i++ % xs.len()];
        });
    }

    str(xs) {
        return xs.map(str).sum();
    }

    list(xs) {
        return xs;
    }

    mean(xs) {
        return match xs {
            [] => nil,
            _  => xs.map(float).sum() / xs.len()
        };
    }

    coalesce(xs) {
        for x in xs {
            if (?x) return x;
        }
    }

    __iter__(xs) {
        let i = 0;
        return Generator(function () {
            if (i < xs.len()) return xs[i++];
        });
    }
}

class Dict : Iterable {
    init(ks, vs) {
        if ks && vs {
            return { k: v for [k, v] in ks.zip(vs) };
        } else {
            return {};
        }
    }

    map(d, f) {
        return { k: f(v) for k, v in d };
    }

    kmap(d, f) {
        return { f(k): v for k, v in d };
    }

    __iter__(d) {
        return d.keys().zip(d.values()).__iter__();
    }
}

class String : Iterable {
    init(x) {
        return str(x);
    }

    repeat(s, n) {
        return if ?n {
            let b = blob();
            for _ in ..n { b.push(s); }
            b.str()
        } else {
            Generator(|s|);
        };
    }

    reverse(s) {
        return s.chars().reverse!().sum() ?? '';
    }

    num?(s) {
        return s.match?(/^\d+(?:\.\d+)?$/);
    }

    searchr(s, pattern) {
        for (let off = s.len() - 1; off >= 0; --off) {
            if let $i = s.search(pattern, off) {
                return i;
            }
        }
    }

    __iter__(s) {
        let cs = s.chars();
        let i = 0;
        return Generator(function () {
            if (i < cs.len()) return cs[i++];
        });
    }
}

class Int {
    init(x)  { return int(x ?? 0);           }

    &(a, b)  { return bit::and(a, b);        }
    ^(a, b)  { return bit::xor(a, b);        }
    .|(a, b) { return bit::or(a, b);         }
    <<(a, b) { return bit::shiftLeft(a, b);  }
    >>(a, b) { return bit::shiftRight(a, b); }
    **(a, b) { return math::pow(a, b);       }

    upto(a, b) {
        let i = a;
        return Generator(function () {
            if (i <= b) return i++;
        });
    }

    downto(a, b) {
        let i = a;
        return Generator(function () {
            if (i >= b) return i--;
        });
    }

    count(a, k) {
        k ?= 1;
        return Generator(function () {
            return (a += k) - k;
        });
    }

    in?(k, r) {
        return r ? k;
    }
}

class Float {
    init(x) {
        return float(x);
    }

    **(a, b) {
        return math::pow(a, b);
    }
}

class Blob : Iterable {
    init(*args) {
        let b = blob();
        for arg in args { b.push(arg); }
        return b;
    }

    searchr(b, s) {
        for (let off = b.size() - 1; off >= 0; --off) {
            if let $i = b.search(off, s) {
                return i;
            }
        }
    }

    __iter__(b) {
        let i = 0;
        return Generator(function () {
            if (i < b.size())
                return b[i++];
        });
    }
}

class Bool {
    init(x) {
        return !(!x);
    }
}

class Regex {
    init(x)  { return regex(x);    }
    ~=(r, s) { return s.match!(r); }
    ?(r, s)  { return s.match?(r); }
}

class Generator : Iter {
    init(self, f) {
        self.f = f;
    }

    __next__(self) {
        return (self.f)();
    }
}

class Iterable {
    map(I, f) {
        return I.__iter__().map(f);
    }

    filter(I, f) {
        return I.__iter__().filter(f);
    }

    reverse(I) {
        return I.__iter__().reverse();
    }

    list(I) {
        return I.__iter__().list();
    }

    uniq(I, f) {
        return I.__iter__().uniq(f);
    }

    take(I, n) {
        return I.__iter__().take(n);
    }

    drop(I, n) {
        return I.__iter__().drop(n);
    }

    set(I) {
        return I.__iter__().set();
    }

    str(I) {
        return I.__iter__().str();
    }

    join(I) {
        return I.__iter__().join();
    }

    tally(I, f) {
        return I.__iter__().tally(f);
    }

    min(I, k) {
        return I.__iter__().min(k);
    }

    max(I, k) {
        return I.__iter__().max(k);
    }

    count(I, x) {
        return I.__iter__().count(x);
    }

    intersperse(I, x) {
        return I.__iter__().intersperse(x);
    }

    groupsOf(I, n, keepShort) {
        return I.__iter__().groupsOf(n, keepShort);
    }

    mean(I) {
        return I.__iter__().mean();
    }

    sum(I) {
        return I.__iter__().sum();
    }

    fold(I, a, b) {
        return I.__iter__().fold(a, b);
    }

    group(I, f) {
        return I.__iter__().group(f);
    }

    chain(A, B) {
        return A.__iter__().chain(B);
    }

    cycle(I) {
        return I.list().cycle();
    }

    repeat(I, n) {
        return I.__iter__().repeat(n);
    }

    __len__(I) {
        return I.__iter__().__len__();
    }

    __subscript__(I, i) {
        return I.__iter__().__subscript__(i);
    }
}

class Iter {
    map(I, f) {
        return MapIter(I, f);
    }

    filter(I, f) {
        return FilterIter(I, f);
    }

    fold(I, a, b) {
        let [f, first] = ([b, a] if ?b else [a]);

        if !let $x = match first { $x => x, _ => I.__next__() } {
            return nil;
        }

        while let $y = I.__next__() {
            x = f(x, y);
        }

        return x;
    }

    __len__(I) {
        let n = 0;
        while let $_ = I.__next__() { n += 1; }
        return n;
    }

    uniq(I, f) {
        let seen = {};
        return Generator(function () {
            while let $x = I.__next__() {
                let y = f(x) if f else x;
                if !(seen ? y) {
                    seen.put(y);
                    return x;
                }
            }
        });
    }

    group(I, f: id) {
        if !let $x = I.__next__() {
            return Generator(|nil|);
        }

        let g = [x];

        return Generator(function () {
            while let $x = I.__next__() {
                if f(x) == f(g[-1]) {
                    g.push(x);
                } else {
                    let group = g;
                    g = [x];
                    return group;
                }
            }

            if g {
                let group = g;
                g = nil;
                return group;
            }
        });
    }

    groupsOf(I, n, keepShort: true) {
        let g = [];

        return Generator(function () {
            let group = while let $x = I.__next__() {
                g.push(x);
                if #g == n {
                    let group = g;
                    g = [];
                    break group;
                }
            };

            if g && keepShort {
                let group = g;
                g = nil;
                return group;
            }
        });
    }

    join(I, sep) {
        if !let (str ~> $s) = I.__next__() {
            return '';
        }

        let b = Blob(s);

        while let $s = I.__next__() {
            b.push(sep);
            b.push(s);
        }

        return b.str();
    }

    count(I, x) {
        let n = 0;

        if type(x) == Function || type(x) == Regex {
            while let $y = I.__next__() {
                if (x(y)) n += 1;
            }
        } else {
            while let $y = I.__next__() {
                if (x == y) n += 1;
            }
        }

        return n;
    }

    list(I) {
        let xs = [];
        while let $x = I.__next__() {
            xs.push(x);
        }
        return xs;
    }

    reverse(I) {
        return ReverseIter(I);
    }

    take(I, n) {
        let i = 0;
        return Generator(function () {
            if i++ < n {
                return I.__next__();
            }
        });
    }

    drop(I, n) {
        for _ in ..n { I.__next__(); }
        return I;
    }

    set(I) {
        return { x for x in I };
    }

    str(I) {
        let b = blob();
        for s in I {
            b.push(str(s));
        }
        return b.str();
    }

    tally(I, f: id) {
        let d = {*:0};
        for x in I { d[f(x)] += 1; }
        return d;
    }

    max(I, k: id) {
        if !let $x = I.__next__() {
            return nil;
        }

        let m = x;
        let mKey = k(m);

        while let $x = I.__next__() {
            let key = k(x);
            if key > mKey {
                m, mKey = x, key;
            }
        }

        return m;
    }

    min(I, k: id) {
        if !let $x = I.__next__() {
            return nil;
        }

        let m = x;
        let mKey = k(m);

        while let $x = I.__next__() {
            let key = k(x);
            if key < mKey {
                m, mKey = x, key;
            }
        }

        return m;
    }

    intersperse(I, x) {
        let i = 0;
        let next = I.__next__();
        return Generator(function () {
            if (?next) match i++ % 2 {
                0 => {
                    let r = next;
                    next = I.__next__();
                    return r;
                },
                1 => {
                    return x;
                }
            }
        });
    }

    chainAll(I) {
        if !let $it = I.__next__() {
            return nil;
        }
        if !it.is?(Iter) {
            it = it.__iter__();
        }
        return Generator(function () {
            if let $x = it.__next__() {
                return x;
            } else if !?(it = I.__next__()) {
                return nil;
            } else if !it.is?(Iter) {
                it = it.__iter__();
            }
            return it.__next__();
        });
    }

    chain(it, *its) {
        let i = 0;
        its.insert(0, it);

        for i in ..#its | !its[i].is?(Iter) {
            its[i] = its[i].__iter__();
        }

        return Generator(function () {
            if let $x = its[i].__next__() {
                return x;
            } else if (++i >= #its) {
                return nil;
            } else {
                return its[i].__next__();
            }
        });
    }

    cycle(I) {
        return I.list().cycle();
    }

    repeat(I, n) {
        let xs = I.list();
        let i = 0;
        let j = 0;
        return Generator(function () {
            if j == #xs {
                j = 0;
                i += 1;
            }
            if i != n {
                return xs[j++];
            }
        });
    }

    replicate(x, n) {
        let i = 0;
        return Generator(function () {
            if (!?n || i++ < n) return x;
        });
    }

    sum(I) {
        return I.list().sum();
    }

    mean(I) {
        return I.list().mean();
    }

    __subscript__(I, i) {
        for _ in ..(i - 1) {
            if (!?I.__next__()) return nil;
        }
        return I.__next__();
    }
}

class ReverseIter : Iter {
    init(R, I) {
        R.xs = [];
        while let $x = I.__next__() {
            R.xs.push(x);
        }
    }

    __next__(R) {
        if (R.xs) return R.xs.pop();
    }
}

class MapIter : Iter {
    init(M, I, f) {
        M.I = I;
        M.f = f;
    }

    __next__(M) {
        if let $n = M.I.__next__() {
            return M.f(n);
        }
    }
}

class FilterIter : Iter {
    init(F, I, p) {
        F.I = I;
        F.p = p;
    }

    __next__(F) {
        while let $n = F.I.__next__() {
            if F.p(n) { return n; }
        }
    }
}

class RangeIter : Iter {
    init(R, a, b) {
        R.a = a;
        R.b = b;
    }

    __next__(R) {
        if (R.a < R.b) return R.a++;
    }
}

class Range : Iterable {
    init(self, a, b) {
        self.a = a;
        self.b = b;
    }

    low(self) {
        return min(self.a, self.b);
    }

    high(self) {
        return max(self.a, self.b) - 1;
    }

    __len__(self) {
        return self.high() - self.low() + 1;
    }

    __str__(self) {
	return "({self.a} .. {self.b})";
    }

    contains?(self, k) {
	return self ? k;
    }

    has?(self, k) {
        return self ? k;
    }

    ?(self, k) {
	return k >= self.low() && k <= self.high();
    }

    __iter__(self) {
        let a, b = self.a, self.b;
        return (
            if a < b {
                a.upto(b - 1)
            } else {
                (a - 1).downto(b)
            }
        );
    }
}

class InclusiveRange : Range {
    __str__(self) {
        return "({self.a} ... {self.b})";
    }

    __iter__(self) {
        let a, b = self.a, self.b;
        return if a < b {
            a.upto(b)
        } else {
            a.downto(b);
        };
    }

    high(self) {
        return max(self.a, self.b);
    }
}

function id(x) { return x; }

operator ?  5  left
operator ** 10 right
operator << 7  left
operator >> 7  left
operator &  6  left
operator ^  5  left
operator .| 4  left
