import ffi as c

export wrap, memcpy, strlen, memcmp, strcmp

function wrap(lib, name, rType, *aTypes) {
	if not let $fp = c.dlsym(name, lib) {
		throw Err("Failed to load symbol '{name}'")
	}

	let interface = c.cif(rType, *aTypes)
	let argStorage = [c.new(t) for t in aTypes]

	return function (*args) {
		for arg, i in args {
			c.store(aTypes[i], argStorage[i], arg)
		}
		c.call(interface, fp, *argStorage)
	}
}

let memcpy = wrap(nil, 'memcpy', c.ptr, c.ptr, c.ptr, c.u64)
let strlen = wrap(nil, 'strlen', c.u64, c.ptr)
let memcmp = wrap(nil, 'memcmp', c.int, c.ptr, c.ptr, c.u64)
let strcmp = wrap(nil, 'strcmp', c.int, c.ptr, c.ptr)
