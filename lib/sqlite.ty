import sqlite3c (..)

export SQLite

tag SQLiteError {
    str() {
        errorMessage(self)
    }
}

class SQLiteRowIter : Iter {
    init(s) {
        self.s = s
    }

    __next__() {
        Some.from(self.s.nextRow())
    }
}

class SQLiteStatement : Iterable {
    init(p) {
        self.p = p
        self.setFinalizer(@finalize)
    }

    exec() {
        if self.p {
            let r = step(self.p)
            finalize(self.p)
            self.p = nil
            return r
        } else {
            throw SQLiteError(SQLITE_MISUSE)
        }
    }

    step() {
        if self.p {
            self.status = step(self.p)
            return self.status
        } else {
            throw SQLiteError(SQLITE_MISUSE)
        }
    }

    row() {
        if self.p {
            if self.status == SQLITE_ROW {
                return fetchAssoc(self.p)
            } else {
                return nil
            }
        } else {
            throw SQLiteError(SQLITE_MISUSE)
        }
    }

    nextRow() {
        self.step()
        let row = self.row()
        if self.status == SQLITE_DONE {
            self.finalize()
        }
        return row
    }

    finalize() {
        if self.p {
            finalize(self.p)
            self.p = nil
        }
    }

    rows() {
        if !self.p {
            throw SQLiteError(SQLITE_MISUSE)
        }
        reset(self.p)
        return SQLiteRowIter(self)
    }

    __drop__() {
        self.finalize()
    }

    __iter__() {
        self.rows()
    }
}

class SQLite {
    init(path) {
        if let $db = open(path) {
            @db = db
        } else {
            throw SQLiteError(error())
        }
    }

    close() {
        if self.db {
            close(self.db)
            self.db = nil
        }
    }

    query(sql, *ps) {
        if not let $s  = prepare(self.db, sql) {
            throw SQLiteError(error(self.db))
        }

        for p, i in ps {
            match bind(s, i + 1, p) {
                SQLITE_OK => { },
                e         => throw SQLiteError(e)
            }
        }

        return SQLiteStatement(s)
    }

    exec(sql, *ps) {
        self.query(sql, *ps).exec()
    }

    errorMessage() {
        errorMessage(@db)
    }
}
