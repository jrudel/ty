import cutil (wrap)
import ffi as c
import bit
import os

let CSIZE = 0000060
let CS5 = 0000000
let CS6 = 0000020
let CS7 = 0000040
let CS8 = 0000060
let CSTOPB = 0000100
let CREAD = 0000200
let PARENB = 0000400
let PARODD = 0001000
let HUPCL = 0002000
let CLOCAL = 0004000

let IGNBRK = 0000001  /* Ignore break condition.  */
let BRKINT = 0000002  /* Signal interrupt on break.  */
let IGNPAR = 0000004  /* Ignore characters with parity errors.  */
let PARMRK = 0000010  /* Mark parity and framing errors.  */
let INPCK = 0000020  /* Enable input parity check.  */
let ISTRIP = 0000040  /* Strip 8th bit off characters.  */
let INLCR = 0000100  /* Map NL to CR on input.  */
let IGNCR = 0000200  /* Ignore CR.  */
let ICRNL = 0000400  /* Map CR to NL on input.  */
let IUCLC = 0001000  /* Map uppercase characters to lowercase on input */
let IXON = 0002000  /* Enable start/stop output control.  */
let IXANY = 0004000  /* Enable any character to restart output.  */
let IXOFF = 0010000  /* Enable start/stop input control.  */
let IMAXBEL = 0020000  /* Ring bell when input queue is full */
let IUTF8 = 0040000  /* Input is UTF8 (not in POSIX).  */ 

let OPOST = 0000001  /* Post-process output.  */
let OLCUC = 0000002  /* Map lowercase characters to uppercase on output. */
let ONLCR = 0000004  /* Map NL to CR-NL on output.  */
let OCRNL = 0000010  /* Map CR to NL on output.  */
let ONOCR = 0000020  /* No CR output at column 0.  */
let ONLRET = 0000040  /* NL performs CR function.  */
let OFILL = 0000100  /* Use fill characters for delay.  */
let OFDEL = 0000200  /* Fill is DEL.  */
let VTDLY = 0040000  /* Select vertical-tab delays:  */
let VT0 = 0000000  /* Vertical-tab delay type 0.  */
let VT1 = 0040000  /* Vertical-tab delay type 1.  */

let B0 = 0000000		/* hang up */
let B50 = 0000001
let B75 = 0000002
let B110 = 0000003
let B134 = 0000004
let B150 = 0000005
let B200 = 0000006
let B300 = 0000007
let B600 = 0000010
let B1200 = 0000011
let B1800 = 0000012
let B2400 = 0000013
let B4800 = 0000014
let B9600 = 0000015
let B19200 = 0000016
let B38400 = 0000017
let TCOOFF = 0
let TCOON = 1
let TCIOFF = 2
let TCION = 3
let TCIFLUSH = 0
let TCOFLUSH = 1
let TCIOFLUSH = 2

let ISIG = 0000001   /* Enable signals.  */
let ICANON = 0000002   /* Canonical input (erase and kill processing).  */
let ECHO = 0000010   /* Enable echo.  */
let ECHOE = 0000020   /* Echo erase character as error-correcting */
let ECHOK = 0000040   /* Echo KILL.  */
let ECHONL = 0000100   /* Echo NL.  */
let NOFLSH = 0000200   /* Disable flush after interrupt or quit.  */
let TOSTOP = 0000400   /* Send SIGTTOU for background output.  */
let IEXTEN = 0100000   /* Enable implementation-defined input */

let TCSANOW = 0
let TCSADRAIN = 1
let TCSAFLUSH = 2

pub termios = c.struct(
  c.uint, // iflag
  c.uint, // oflag
  c.uint, // cflag
  c.uint, // lflag
  c.u8,   // c_line
  c.struct(*[c.u8 for _ in ..32]), // c_cc
  c.uint, // ispeed
  c.uint  // ospeed
)

pub tcgetattr = wrap(nil, 'tcgetattr', c.int, c.int, c.ptr)
pub tcsetattr = wrap(nil, 'tcsetattr', c.int, c.int, c.int, c.ptr)
