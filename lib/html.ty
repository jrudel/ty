import gumbo

export parse, HtmlText

function parse(s) {
    if !let $d = gumbo::parse(s).root {
        return nil;
    }

    return HtmlElement.from(d);

}

tag HtmlText {
    text() { return self; }
}


class HtmlElement {
    init(t, p) {
        self.parent = p;
        self.children = [];
        self.t = t;
        self.attrs = {};
    }

    attr(a) {
        return self.attrs[a];
    }

    text() {
        return self.children.filter(-> match $ { HtmlText(_) => true, _ => false }).map(e -> e.text()).join(' ')
                   .sub(/\s+/, ' ')
                   .sub(/(^\s*)|(\s*$)/, '');
    }

    from(n, p) {
        if n.type == gumbo::NODE_ELEMENT {
            let e = HtmlElement(n.element.t, p);
            e.children = n.element.children.map(c -> HtmlElement.from(c, e));
            e.attrs = { a.name : (a.value || true) for a in n.element.attributes };
            return e;
        } else {
            return HtmlText(n.text);
        }
    }

    __str__() {
        let attrString = [ " {k}=\"{v}\"" for k, v in self.attrs ].join(' ') || '';
        return "<{self.t}{attrString}>";
    }

    find(q) {
        let rest = self.children.filter(-> $ :: HtmlElement).map(&find(q)).sum() || [];
        return if self.t == q {
            [self] + rest
        } else {
            rest
        };
    }
}
