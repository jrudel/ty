import ffi as c
import cutil
import stdio
import os

let SPNG_VERSION_MAJOR = 0
let SPNG_VERSION_MINOR = 7
let SPNG_VERSION_PATCH = 1
let SPNG_IO_ERROR = -2
let SPNG_IO_EOF = -1
let SPNG_OK = 0
let SPNG_EINVAL = SPNG_OK + 1
let SPNG_EMEM = SPNG_EINVAL + 1
let SPNG_EOVERFLOW = SPNG_EMEM + 1
let SPNG_ESIGNATURE = SPNG_EOVERFLOW + 1
let SPNG_EWIDTH = SPNG_ESIGNATURE + 1
let SPNG_EHEIGHT = SPNG_EWIDTH + 1
let SPNG_EUSER_WIDTH = SPNG_EHEIGHT + 1
let SPNG_EUSER_HEIGHT = SPNG_EUSER_WIDTH + 1
let SPNG_EBIT_DEPTH = SPNG_EUSER_HEIGHT + 1
let SPNG_ECOLOR_TYPE = SPNG_EBIT_DEPTH + 1
let SPNG_ECOMPRESSION_METHOD = SPNG_ECOLOR_TYPE + 1
let SPNG_EFILTER_METHOD = SPNG_ECOMPRESSION_METHOD + 1
let SPNG_EINTERLACE_METHOD = SPNG_EFILTER_METHOD + 1
let SPNG_EIHDR_SIZE = SPNG_EINTERLACE_METHOD + 1
let SPNG_ENOIHDR = SPNG_EIHDR_SIZE + 1
let SPNG_ECHUNK_POS = SPNG_ENOIHDR + 1
let SPNG_ECHUNK_SIZE = SPNG_ECHUNK_POS + 1
let SPNG_ECHUNK_CRC = SPNG_ECHUNK_SIZE + 1
let SPNG_ECHUNK_TYPE = SPNG_ECHUNK_CRC + 1
let SPNG_ECHUNK_UNKNOWN_CRITICAL = SPNG_ECHUNK_TYPE + 1
let SPNG_EDUP_PLTE = SPNG_ECHUNK_UNKNOWN_CRITICAL + 1
let SPNG_EDUP_CHRM = SPNG_EDUP_PLTE + 1
let SPNG_EDUP_GAMA = SPNG_EDUP_CHRM + 1
let SPNG_EDUP_ICCP = SPNG_EDUP_GAMA + 1
let SPNG_EDUP_SBIT = SPNG_EDUP_ICCP + 1
let SPNG_EDUP_SRGB = SPNG_EDUP_SBIT + 1
let SPNG_EDUP_BKGD = SPNG_EDUP_SRGB + 1
let SPNG_EDUP_HIST = SPNG_EDUP_BKGD + 1
let SPNG_EDUP_TRNS = SPNG_EDUP_HIST + 1
let SPNG_EDUP_PHYS = SPNG_EDUP_TRNS + 1
let SPNG_EDUP_TIME = SPNG_EDUP_PHYS + 1
let SPNG_EDUP_OFFS = SPNG_EDUP_TIME + 1
let SPNG_EDUP_EXIF = SPNG_EDUP_OFFS + 1
let SPNG_ECHRM = SPNG_EDUP_EXIF + 1
let SPNG_EPLTE_IDX = SPNG_ECHRM + 1
let SPNG_ETRNS_COLOR_TYPE = SPNG_EPLTE_IDX + 1
let SPNG_ETRNS_NO_PLTE = SPNG_ETRNS_COLOR_TYPE + 1
let SPNG_EGAMA = SPNG_ETRNS_NO_PLTE + 1
let SPNG_EICCP_NAME = SPNG_EGAMA + 1
let SPNG_EICCP_COMPRESSION_METHOD = SPNG_EICCP_NAME + 1
let SPNG_ESBIT = SPNG_EICCP_COMPRESSION_METHOD + 1
let SPNG_ESRGB = SPNG_ESBIT + 1
let SPNG_ETEXT = SPNG_ESRGB + 1
let SPNG_ETEXT_KEYWORD = SPNG_ETEXT + 1
let SPNG_EZTXT = SPNG_ETEXT_KEYWORD + 1
let SPNG_EZTXT_COMPRESSION_METHOD = SPNG_EZTXT + 1
let SPNG_EITXT = SPNG_EZTXT_COMPRESSION_METHOD + 1
let SPNG_EITXT_COMPRESSION_FLAG = SPNG_EITXT + 1
let SPNG_EITXT_COMPRESSION_METHOD = SPNG_EITXT_COMPRESSION_FLAG + 1
let SPNG_EITXT_LANG_TAG = SPNG_EITXT_COMPRESSION_METHOD + 1
let SPNG_EITXT_TRANSLATED_KEY = SPNG_EITXT_LANG_TAG + 1
let SPNG_EBKGD_NO_PLTE = SPNG_EITXT_TRANSLATED_KEY + 1
let SPNG_EBKGD_PLTE_IDX = SPNG_EBKGD_NO_PLTE + 1
let SPNG_EHIST_NO_PLTE = SPNG_EBKGD_PLTE_IDX + 1
let SPNG_EPHYS = SPNG_EHIST_NO_PLTE + 1
let SPNG_ESPLT_NAME = SPNG_EPHYS + 1
let SPNG_ESPLT_DUP_NAME = SPNG_ESPLT_NAME + 1
let SPNG_ESPLT_DEPTH = SPNG_ESPLT_DUP_NAME + 1
let SPNG_ETIME = SPNG_ESPLT_DEPTH + 1
let SPNG_EOFFS = SPNG_ETIME + 1
let SPNG_EEXIF = SPNG_EOFFS + 1
let SPNG_EIDAT_TOO_SHORT = SPNG_EEXIF + 1
let SPNG_EIDAT_STREAM = SPNG_EIDAT_TOO_SHORT + 1
let SPNG_EZLIB = SPNG_EIDAT_STREAM + 1
let SPNG_EFILTER = SPNG_EZLIB + 1
let SPNG_EBUFSIZ = SPNG_EFILTER + 1
let SPNG_EIO = SPNG_EBUFSIZ + 1
let SPNG_EOF = SPNG_EIO + 1
let SPNG_EBUF_SET = SPNG_EOF + 1
let SPNG_EBADSTATE = SPNG_EBUF_SET + 1
let SPNG_EFMT = SPNG_EBADSTATE + 1
let SPNG_EFLAGS = SPNG_EFMT + 1
let SPNG_ECHUNKAVAIL = SPNG_EFLAGS + 1
let SPNG_ENCODE_ONLY = SPNG_ECHUNKAVAIL + 1
let SPNG_EOI = SPNG_ENCODE_ONLY + 1
let SPNG_ENOPLTE = SPNG_EOI + 1
let SPNG_ECHUNK_LIMITS = SPNG_ENOPLTE + 1
let SPNG_EZLIB_INIT = SPNG_ECHUNK_LIMITS + 1
let SPNG_ECHUNK_STDLEN = SPNG_EZLIB_INIT + 1
let SPNG_EINTERNAL = SPNG_ECHUNK_STDLEN + 1
let SPNG_ECTXTYPE = SPNG_EINTERNAL + 1
let SPNG_ENOSRC = SPNG_ECTXTYPE + 1
let SPNG_ENODST = SPNG_ENOSRC + 1
let SPNG_EOPSTATE = SPNG_ENODST + 1
let SPNG_ENOTFINAL = SPNG_EOPSTATE + 1
let SPNG_TEXT = 1
let SPNG_ZTXT = 2
let SPNG_ITXT = 3
let SPNG_COLOR_TYPE_GRAYSCALE = 0
let SPNG_COLOR_TYPE_TRUECOLOR = 2
let SPNG_COLOR_TYPE_INDEXED = 3
let SPNG_COLOR_TYPE_GRAYSCALE_ALPHA = 4
let SPNG_COLOR_TYPE_TRUECOLOR_ALPHA = 6
let SPNG_FILTER_NONE = 0
let SPNG_FILTER_SUB = 1
let SPNG_FILTER_UP = 2
let SPNG_FILTER_AVERAGE = 3
let SPNG_FILTER_PAETH = 4
let SPNG_DISABLE_FILTERING = 0
let SPNG_FILTER_CHOICE_NONE = 8
let SPNG_FILTER_CHOICE_SUB = 16
let SPNG_FILTER_CHOICE_UP = 32
let SPNG_FILTER_CHOICE_AVG = 64
let SPNG_FILTER_CHOICE_PAETH = 128
let SPNG_FILTER_CHOICE_ALL = (8|16|32|64|128)
let SPNG_INTERLACE_NONE = 0
let SPNG_INTERLACE_ADAM7 = 1
let SPNG_FMT_RGBA8 = 1
let SPNG_FMT_RGBA16 = 2
let SPNG_FMT_RGB8 = 4
let SPNG_FMT_GA8 = 16
let SPNG_FMT_GA16 = 32
let SPNG_FMT_G8 = 64
let SPNG_FMT_PNG = 256
let SPNG_FMT_RAW = 512  /* big-endian */
let SPNG_CTX_IGNORE_ADLER32 = 1
let SPNG_CTX_ENCODER = 2 /* Create an encoder context */
let SPNG_DECODE_USE_TRNS = 1
let SPNG_DECODE_USE_GAMA = 2
let SPNG_DECODE_USE_SBIT = 8
let SPNG_DECODE_TRNS = 1
let SPNG_DECODE_GAMMA = 2
let SPNG_DECODE_PROGRESSIVE = 256 /* Initialize for progressive reads */
let SPNG_CRC_ERROR = 0
let SPNG_CRC_DISCARD = 1
let SPNG_CRC_USE = 2
let SPNG_ENCODE_PROGRESSIVE = 1
let SPNG_ENCODE_FINALIZE = 2
let SPNG_AFTER_IHDR = 1
let SPNG_AFTER_PLTE = 2
let SPNG_AFTER_IDAT = 8
let SPNG_KEEP_UNKNOWN_CHUNKS = 1
let SPNG_IMG_COMPRESSION_LEVEL = SPNG_KEEP_UNKNOWN_CHUNKS + 1
let SPNG_IMG_WINDOW_BITS = SPNG_IMG_COMPRESSION_LEVEL + 1
let SPNG_IMG_MEM_LEVEL = SPNG_IMG_WINDOW_BITS + 1
let SPNG_IMG_COMPRESSION_STRATEGY = SPNG_IMG_MEM_LEVEL + 1
let SPNG_TEXT_COMPRESSION_LEVEL = SPNG_IMG_COMPRESSION_STRATEGY + 1
let SPNG_TEXT_WINDOW_BITS = SPNG_TEXT_COMPRESSION_LEVEL + 1
let SPNG_TEXT_MEM_LEVEL = SPNG_TEXT_WINDOW_BITS + 1
let SPNG_TEXT_COMPRESSION_STRATEGY = SPNG_TEXT_MEM_LEVEL + 1
let SPNG_FILTER_CHOICE = SPNG_TEXT_COMPRESSION_STRATEGY + 1
let SPNG_CHUNK_COUNT_LIMIT = SPNG_FILTER_CHOICE + 1
let SPNG_ENCODE_TO_BUFFER = SPNG_CHUNK_COUNT_LIMIT + 1


let spng_ihdr = c.struct(
    c.u32, // w
    c.u32, // h
    c.u8,  // bit depth
    c.u8,  // color type
    c.u8,  // compression method
    c.u8,  // filter method
    c.u8   // interlace method
)

let $LIB = c.dlopen('libspng.so')

function w(*args) {
  cutil.wrap(LIB, *args)
}

let spng_ctx_new = w('spng_ctx_new', c.ptr, c.int)
let spng_ctx_free = w('spng_ctx_free', c.void, c.ptr)
let spng_set_png_buffer = w('spng_set_png_buffer', c.int, c.ptr, c.ptr, c.u64)
let spng_set_crc_action = w('spng_set_crc_action', c.int, c.ptr, c.int, c.int)
let spng_set_chunk_limits = w('spng_set_chunk_limits', c.int, c.ptr, c.u64, c.u64)
let spng_get_chunk_limits = w('spng_get_chunk_limits', c.int, c.ptr, c.ptr, c.ptr)
let spng_get_image_limits = w('spng_get_image_limits', c.int, c.ptr, c.ptr, c.ptr)
let spng_set_image_limits = w('spng_set_image_limits', c.int, c.ptr, c.u32, c.u32)
let spng_set_option = w('spng_set_option', c.int, c.ptr, c.int, c.int)
let spng_get_option = w('spng_get_option', c.int, c.ptr, c.int, c.ptr)
let spng_set_png_file = w('spng_set_png_file', c.int, c.ptr, c.ptr)
let spng_get_ihdr = w('spng_get_ihdr', c.int, c.ptr, c.ptr)
let spng_set_ihdr = w('spng_set_ihdr', c.int, c.ptr, c.ptr)
let spng_decoded_image_size = w('spng_decoded_image_size', c.int, c.ptr, c.int, c.ptr)
let spng_decode_image = w('spng_decode_image', c.int, c.ptr, c.ptr, c.u64, c.int, c.int)

let $f = stdio.fdopen(os.open('after.png', [os.O_RDONLY]), 'r')
let ctx = spng_ctx_new(0)

print(f)
print(spng_set_png_file(ctx, f))

let hdr = c.new(spng_ihdr)

print(spng_get_ihdr(ctx, hdr))

let w = c.member(spng_ihdr, hdr, 0)
let h = c.member(spng_ihdr, hdr, 1)
let colorType = c.member(spng_ihdr, hdr, 3)

print(match colorType {
    ::SPNG_COLOR_TYPE_GRAYSCALE         => 'Greyscale',
    ::SPNG_COLOR_TYPE_TRUECOLOR         => 'True color',
    ::SPNG_COLOR_TYPE_TRUECOLOR_ALPHA   => 'True color with alpha'
})

print(w, h)

let fmt = SPNG_FMT_PNG
let sizePtr = c.new(c.u64)

print(spng_decoded_image_size(ctx, fmt, sizePtr))

let size = c.load(c.u64, sizePtr)
let buffer = c.alloc(size)

print(spng_decode_image(ctx, buffer, size, SPNG_FMT_PNG, 0))
