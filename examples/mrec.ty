import math

print([4, 5, 2] <+> [1, 9, 7]);

operator ?> (x, f) {
    return nil if x == nil else f(x);
}

operator <+>(a, b) {
    let i = 0;
    return a.map(function (x) {
        print(i);
        return x + b[i++];
    });
}

operator <.>(a, b) {
    print(b);
    return a.zipWith((a, b) -> a * b, b).sum();
}

class Range {
    init(self, a, b) {
        self.a = a;
        self.b = b;
    }

    __next__(self) {
        return self.a++ if self.a < self.b else nil;
    }

    __iter__(self) {
        return self;
    }
}

class MapIter {
    init(self, f, it) {
        self.f = f;
        self.it = it;
    }

    __next__(self) {
        return self.it.__next__() ?> self.f;
    }

    __iter__(self) {
        return self;
    }
}

class FilterIter {
    init(self, f, it) {
        self.f = f;
        self.it = it;
    }

    __next__(self) {
        while let $x = self.it.__next__() {
            print(x);
            if ((self.f)(x)) { return x; }
        }
    }

    __iter__(self) {
        return self;
    }
}

operator <$>(f, it) {
    return MapIter(f, it);
}

operator ....(a, b) {
    return Range(a, b);
}

operator %>(it, f) {
    return FilterIter(f, it);
}

operator .*.(f, n) {
    return (..n).list().map(f);
}

function r() {
    return rand(500000) / 499999.0;
}

function pdf(x) {
    return 0.4 * math::exp(-0.4 * x);
}

function sample() {
    for (;;) {
        let x = r() * 5;
        let y = r() * 0.4;
        if (pdf(x) > y) return int(x + 2.4);
    }
}

function rs(n) {
    let b = blob();
    for _ in ..n {
        b.push((rand() % 26) + 97);
    }
    return b.str();
}

function g() {
    let d = {}.default(_ -> []);
    let s = (..500).list().map(|rs(sample())|).join(' ');
    for m in s.matches(/\w+/) {
        d[m.len()].push(m);
    }

    return d.values().maxBy(.len()).join(' ');
}

for _ in (..20) {
    for k in |rand() % 50| <$> (0....50) %> (n -> n % 2 == 0) {
            print(["{k}", "{(|rand() % 30| .*. 12).groupsOf(4).mapCons(2, ([a, b]) -> a <.> b)}", g()].join('____         '.chars().shuffle().sum()));
    }
}

for _ in (..50) {
    for k in |rand() % 50| <$> (0....10) %> (n -> n % 2 == 0) {
            print(["{k}", "{(|rand() % 30| .*. 12).groupsOf(4).mapCons(2, ([a, b]) -> a <.> b)}", g()].join('____         '.chars().shuffle().sum()));
    }
}

for _ in (..5) {
    for k in |rand() % 50| <$> (0....1000) %> (n -> n % 2 == 0) {
            print(["{k}", "{(|rand() % 30| .*. 12).groupsOf(4).mapCons(2, ([a, b]) -> a <.> b)}", g()].join('____         '.chars().shuffle().sum()));
    }
}
