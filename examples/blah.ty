import math (pow)

tag Int, Add, Mul, Pow, End;

let prec = { End: 0, Add: 1, Mul: 2, Pow: 3 };

function parse(tokens, p) {
        let e = tokens.pop();

        while (p < prec[tokens[-1]]) {
                let t = tokens.pop();
                e = t([e, parse(tokens, prec[t])]);
        }

        return e;
}

function eval(ast) {
        return match ast {
                Int(k)      => k,
                Add([a, b]) => eval(a) + eval(b),
                Mul([a, b]) => eval(a) * eval(b),
                Pow([a, b]) => int(pow(eval(a), eval(b)))
        };
}

while let $line = read() {
        let tokens = line.split(' ').map(w -> match w {
                /\d+/ ~> int ~> $k => Int(k),
                '+'                => Add,
                '*'                => Mul,
                '^'                => Pow
        }) + [End];
        let ast = parse(tokens.reverse!(), 0);
        print("{line} = {eval(ast)}");
}
