import bit

let skill = read().split(' ').map(float);
let people = skill.len();
let memo = {};

function setBits(mask) {
     let set = 0;
     for (let i = 0; i < people; ++i)
          if (bit::and(mask, bit::shiftLeft(1, i)) != 0)
               ++set;
     return set;
}

let battle = (i, j) -> skill[i] / (skill[i] + skill[j]);

function prob(winner, mask) {
     if (bit::and(mask, mask - 1) == 0)
          return 1.0;

     let state = mask + bit::shiftLeft(winner, people);

     if let $ans = memo[state] {
          return ans;
     }

     let size = setBits(mask);
     let ans = 0.0;
     let partitions = 0;
     
     for (let f = 0; f < mask; f = bit::and(bit::complement(mask) + f + 1, mask)) {
          if (setBits(f) == size / 2 && bit::and(f, bit::shiftLeft(1, winner)) > 0) {
               let subgameProb = prob(winner, f);
               ++partitions;
               for (let j = 0; j < people; ++j)
                    if (bit::and(mask, bit::and(bit::complement(f), bit::shiftLeft(1, j))) > 0)
                         ans += prob(j, bit::and(mask, bit::complement(f))) * subgameProb * battle(winner, j);
          }
     }

     return memo[state] = ans / partitions;
}

let mask = bit::shiftLeft(1, people) - 1;
let results = [0 .. people - 1].map!(p -> prob(p, mask));
results.groupsOf!(4).each(g -> print(g.map!(str).map!(.slice(0, 8).padLeft(10)).intersperse!(' ').sum()));
