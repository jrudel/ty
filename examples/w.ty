import os (..)
import errno
import time
import io
import base64

let MAX_MSG_SIZE = 1 << 16
let SECOND = 1000000
let MILLISECOND = 1000
let KA_INTERVAL = 1*SECOND
let TIMEOUT = 10*SECOND

class AckedSet {
    init() {
        @n = -1
        @ns = []
    }

    add(n) {
        @ns.push(n)
        @ns.sort!(desc: true)
        while #@ns > 0 && @ns[-1] == @n + 1 {
            @n = @ns.pop()
        }
    }

    contains?(n) {
        (n <= @n) || (n in @ns)
    }
}

let ntfsEpoch = time.time(time.strptime('1601-01-01', '%Y-%m-%d'), utc: true)

function windowsTime() {
    (time.utime() / 1000) - (ntfsEpoch * 1000)
}

let addr = match getaddrinfo('0.0.0.0', '25699', AF_INET, SOCK_DGRAM, 0) {
    Ok([addr, *]) => addr,

    Err(e) => {
        print(gai_strerror(e))
        exit(1)
    }
}

print(getnameinfo(addr.address, NI_NUMERICHOST .|. NI_NUMERICSERV))

let sock = socket(AF_INET, SOCK_DGRAM, 0)
if sock == -1 {
    print("socket(): {errno.str()}")
    exit(1)
}

if bind(sock, addr) < 0 {
    print("bind(): {errno.str()}")
    exit(1)
}

let log = io.open('wh.log', 'w+')

let WH = %{*:[]}
let clients = %{}
let needAck = []
let nPacket = 0
let nextSlotsReport = 0

function send(to, msg) {
    //let (host, port) = getnameinfo(to, NI_NUMERICHOST .|. NI_NUMERICSERV)
    //print("SEND to   {host}:{port}: {msg}")
    sendto(sock, msg, 0, to)
}

function sendAck(to, pNum, msg) {
    if pNum != nil {
        send(to, ":ACK{pNum}:{msg}")
    } else {
        send(to, msg)
    }
}

function sendPkt(to, msg) {
    if to.meta {
        let d = ":PKT{nPacket}:{msg}"
        send(to.endpoint, d)
        needAck.push({
            n: nPacket++,
            t: time.utime() + 500*MILLISECOND,
            d: d,
            e: to.endpoint
        })
    } else {
        send(to.endpoint, msg)
    }
}

function subscribe(client, slot, n) {
    client.subs << slot

    for msg in WH[slot].take(n ?? 0) {
        send(client.endpoint, msg)
    }
}

function add(slot, data) {
    let pushMsg = "PUSH,{slot},{data}"

    if slot not in WH {
        for _, c in clients {
            if c.pSubs.any?(pSub -> slot.search(pSub) == 0) {
                c.subs << slot
            }
        }
    }

    for _, c in clients {
        if slot in c.subs {
            send(c.endpoint, pushMsg)
        }
    }

    WH[slot].insert(0, pushMsg)
    WH[slot].take!(5)
}

function process(msg, sender) {
    let meta = if let [_, meta, rest] = msg.match!(/^:([^:]*):(.*)$/) {
        msg = rest
        meta
    }

    let clientKey = base64.encode(sender)
    let client = clients[clientKey]

    let alreadySeen = false

    let pNum = if meta {
        if let [_, int ~> pNum] = meta.match!(/PKT(\d+)/) {
            if client {
                alreadySeen = pNum in client.acked
                client.acked.add(pNum)
            }
            pNum
        } else if let [_, int ~> pNum] = meta.match!(/ACK(\d+)/) {
            needAck.filter!(pkt -> pkt.n != pNum)
            return
        }
    }

    log.print(msg)

    let tokens = msg.split(',')

    match tokens[0].lower() {
        'register' => {
            let (host, port) = getnameinfo(sender, NI_NUMERICHOST .|. NI_NUMERICSERV)

            if !alreadySeen {
                client = clients[clientKey] = {
                    endpoint: sender,
                    name: tokens[1],
                    nextKA: time.utime() + KA_INTERVAL,
                    timeout: time.utime() + TIMEOUT,
                    acked: AckedSet(),
                    subs: %{},
                    pSubs: [],
                    meta: 'SEQ' in meta,
                    host,
                    port
                }
            }

            sendAck(client.endpoint, pNum, "REGISTERED,1,{KA_INTERVAL / 1000},{TIMEOUT / 1000},")
        },

        'subscribe' :: client != nil => {
            let (nDefault, slots) = match tokens.drop(2) {
                [int ~> $n, *slots] => (n, slots),
                slots               => (0, slots)
            }

            if !alreadySeen {
                for slot in slots {
                    let [slot, ?(int ~> n)] = slot.split(':', 1)
                    if slot[-1] == '*' {
                        let prefix = slot.slice(0, -1)
                        for slot in WH if slot.search(prefix) == 0 {
                            subscribe(client, slot, n ?? nDefault)
                        }
                        client.pSubs.push(prefix)
                    } else {
                        subscribe(client, slot, n ?? nDefault)
                    }
                }
            }

            sendAck(client.endpoint, pNum, "SUBSCRIBED,1")
        },

        'ka-client' :: client != nil => {
            client.timeout = time.utime() + TIMEOUT
        },

        'add' => {
            let [_, slot, *data] = tokens
            let data = data.join(',')

            if !alreadySeen {
                add(slot, data)
            }

            sendAck(sender, pNum, "ADDED,{slot},{windowsTime()},{#WH[slot]},{data}")
        },

        'retr' => {
            let [_, slot, *] = tokens
            if let [m, *] = WH[slot] {
                sendAck(sender, pNum, m.sub(/^PUSH/, 'RESP'))
            } else {
                sendAck(sender, pNum, "RESP,{slot},{windowsTime()}")
            }
        },

        'stats' => {
            let [_, slot, *data] = tokens
            sendAck(sender, pNum, "STATS,{slot},{windowsTime()},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0")
        },

        _ => {
        }
    }
}

function timeToNextEvent() {
    if #clients == 0 return -1
    let now = time.utime()
    let nextKA = clients.iterValues().map(&.nextKA).min()
    let nextTimeout = clients.iterValues().map(&.timeout).min()
    let nextRetry = needAck.map(&.t).min() ?? nextKA

    //print({nextSlotsReport: nextSlotsReport - now, nextKA: nextKA - now, nextTimeout: nextTimeout - now, nextRetry: nextRetry - now})

    max(
        0,
        min(
            nextKA - now,
            nextTimeout - now,
            nextRetry - now,
            nextSlotsReport - now
        )
    ) / 1000
}

let epoll = epoll_create(0)
epoll_ctl(epoll, EPOLL_CTL_ADD, sock, EPOLLIN)

while let $ready = epoll_wait(epoll, timeToNextEvent()) {
    if ready {
        let (&str ~> msg, sender) = recvfrom(sock, MAX_MSG_SIZE, 0)
        let (host, port) = getnameinfo(sender, NI_NUMERICHOST .|. NI_NUMERICSERV)
        //print("RECV from {host}:{port}: {msg}")
        process(msg, sender)
    } else {
        //print('Common Tate L')
    }

    let now = time.utime()

    let dead = []

    for key, c in clients {
        if now >= c.timeout {
            dead.push(key)
        } else if now >= c.nextKA {
            send(c.endpoint, "KA-SERVER,{windowsTime()}")
            c.nextKA = time.utime() + KA_INTERVAL
        }
    }

    for key in dead {
        print("Client {key} timed out.")
        clients.remove(key)
    }

    for pkt in needAck if pkt.t <= now {
        let (host, port) = getnameinfo(pkt.e, NI_NUMERICHOST .|. NI_NUMERICSERV)
        print("RETRY to  {host}:{port}: {pkt.d}")
        let r = sendto(sock, pkt.d, 0, pkt.e)
        pkt.t = now + 500*MILLISECOND
    }

    if now >= nextSlotsReport {
        if #WH > 0 { add('Warehouse-Slots', "{windowsTime()},{WH.keys().join(';')}") }
        nextSlotsReport = time.utime() + 3*SECOND
    }

    //print("Waiting {timeToNextEvent()}ms")
}
