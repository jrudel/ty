import os
import json

let memo = {};

function fetch(type) {
        let c = os::connect('pokeapi.co', 80);

        let request = blob();
        request.push("GET /api/v2/type/{type}/ HTTP/1.1\r\n");
        request.push("Host: pokeapi.co\r\n");
        request.push("Connection: close\r\n");
        request.push("\r\n");

        os::write(c, request);

        let response = blob();
        while (os::read(c, response, 4096) > 0)
                ;

        os::close(c);

        response.clear(-5);

        return json::parse(response.str(response.search('{')));
}

function multiplier(move, target) {
        if (!memo.contains?(move)) {
                memo[move] = fetch(move)['damage_relations'];
                memo[move]['double_damage_to'].map!(t -> t['name']);
                memo[move]['half_damage_to'].map!(t -> t['name']);
                memo[move]['no_damage_to'].map!(t -> t['name']);
        }
        if (memo[move]['double_damage_to'].contains?(target))
                return 2.0;
        if (memo[move]['half_damage_to'].contains?(target))
                return 0.5;
        if (memo[move]['no_damage_to'].contains?(target))
                return 0.0;
        return 1.0;
}

while let $line = read() {
        let [move, types] = line.split(' -> ');
        let m = types.split(' ')
                     .map!(t -> multiplier(move, t))
                     .foldLeft((a, b) -> a * b);
        print("{m}x");
}
